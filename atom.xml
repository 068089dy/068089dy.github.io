<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>068089DY</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://068089dy.github.io/"/>
  <updated>2023-01-12T10:38:48.442Z</updated>
  <id>http://068089dy.github.io/</id>
  
  <author>
    <name>068089DY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我独立开发的第一款游戏</title>
    <link href="http://068089dy.github.io/2023/01/12/2023-01-12-my-first-game-border-escape/"/>
    <id>http://068089dy.github.io/2023/01/12/2023-01-12-my-first-game-border-escape/</id>
    <published>2023-01-12T09:01:46.000Z</published>
    <updated>2023-01-12T10:38:48.442Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.akamai.steamstatic.com/steam/apps/2195240/header.jpg?t=1671698502" alt=""></p><p><strong>离职已有半年了，这期间主要的成果就是开发并上架了我的第一款游戏。</strong></p><h2 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h2><p>这是一款反塔防策略类型的闯关游戏。玩家需要使用不同功能的载具，组成车队，护送自己到达终点。</p><p>游戏画面是卡通像素风，偏军事科幻。</p><p><img src="/images/2023-01-12-my-first-game-border-escape/image_074_0001.png" alt=""></p><p>游戏中拥有12种不同功能的载具。<br>有用来抗伤害的<code>护盾</code>；<br>有用来防空的<code>主动防御</code>；<br>有用来远程打击的<code>火箭炮</code>和<code>迫击炮</code>；<br>还有可以屏蔽敌人的<code>EMP</code>。</p><p>载具都是自动攻击的，玩家只需要排兵布阵，以及控制每列车队的走停。</p><p><img src="/images/2023-01-12-my-first-game-border-escape/image_085_0001.png" alt=""></p><p>合理搭配，协同作战，以发挥车队的最大作用。</p><p>游戏中还有障碍和机关，需要玩家靠近控制塔骇入后，才能解除或者控制，以方便其他车队顺利通过。</p><p><img src="/images/2023-01-12-my-first-game-border-escape/image_086_0001.png" alt=""></p><p><img src="/images/2023-01-12-my-first-game-border-escape/image_082_0001.png" alt=""></p><h2 id="游戏地址"><a href="#游戏地址" class="headerlink" title="游戏地址"></a>游戏地址</h2><p><a href="https://store.steampowered.com/app/2195240/_border_escape/" target="_blank" rel="noopener">Steam</a><br><a href="https://www.taptap.cn/app/240808" target="_blank" rel="noopener">Taptap(试玩)</a><br><a href="">GooglePlay(试玩)(即将上架)</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然没什么销量，但能完成这款游戏，咱心里还是很满足的，算是迈出了第一步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.akamai.steamstatic.com/steam/apps/2195240/header.jpg?t=1671698502&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;离职已有半年了，这期间主要的成果就是开发并上架了我
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://068089dy.github.io/tags/unity/"/>
    
      <category term="独立游戏" scheme="http://068089dy.github.io/tags/%E7%8B%AC%E7%AB%8B%E6%B8%B8%E6%88%8F/"/>
    
      <category term="Steam" scheme="http://068089dy.github.io/tags/Steam/"/>
    
      <category term="Taptap" scheme="http://068089dy.github.io/tags/Taptap/"/>
    
  </entry>
  
  <entry>
    <title>Unity ShaderGraph卡通水</title>
    <link href="http://068089dy.github.io/2023/01/11/2023-01-11-unity-shadergraph-cartoon-water/"/>
    <id>http://068089dy.github.io/2023/01/11/2023-01-11-unity-shadergraph-cartoon-water/</id>
    <published>2023-01-11T09:01:46.000Z</published>
    <updated>2023-01-11T11:38:06.912Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2023-01-11-unity-shadergraph-cartoon-water/image_069_0001.png" alt="1"></p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>边缘部分：用像素坐标减去深度，就能得到水面的深度，这样就能判断出来潜水区。<br>斑点部分就是一个动态的噪声。</p><p><img src="/images/2023-01-11-unity-shadergraph-cartoon-water/shaderGraph.jpg" alt="2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2023-01-11-unity-shadergraph-cartoon-water/image_069_0001.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;header
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://068089dy.github.io/tags/unity/"/>
    
      <category term="ShaderGraph" scheme="http://068089dy.github.io/tags/ShaderGraph/"/>
    
      <category term="Shader" scheme="http://068089dy.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>Unity使用RayMarching渲染一个黑洞</title>
    <link href="http://068089dy.github.io/2022/02/02/2022-02-02-unity-make-blackhole/"/>
    <id>http://068089dy.github.io/2022/02/02/2022-02-02-unity-make-blackhole/</id>
    <published>2022-02-02T09:01:46.000Z</published>
    <updated>2023-01-11T10:54:22.698Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2022-02-02-unity-make-blackhole/shaderDemo 2022_2_2 21_01_03.png" alt="3"></p><h3 id="raymarching介绍"><a href="#raymarching介绍" class="headerlink" title="raymarching介绍"></a>raymarching介绍</h3><p>从Camera发出射线，射线不断前进，直到碰到物体，返回碰到坐标的颜色。<br><img src="/images/2022-02-02-unity-make-blackhole/2022-02-02-21-07-37.png" alt=""></p><h3 id="如何判断是否碰到物体呢？"><a href="#如何判断是否碰到物体呢？" class="headerlink" title="如何判断是否碰到物体呢？"></a>如何判断是否碰到物体呢？</h3><p>使用距离场(SDF)，以球体为例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 伪代码</span><br><span class="line">func SphereSDF(vec3 p, float radius)&#123;</span><br><span class="line">    return length(p) - radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>向上面这个函数中传入一个点坐标p，以及球体的半径radius，就会返回点p到球体的距离。<br>如果返回值大于0，则说明点p在球体外面。<br>如果返回值小于0，说明点p在球体内部。<br>这个函数就是球体的距离场函数。</p><h3 id="使用Raymarching渲染一个球体"><a href="#使用Raymarching渲染一个球体" class="headerlink" title="使用Raymarching渲染一个球体"></a>使用Raymarching渲染一个球体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将shader材质挂载到任意一个mesh上</span><br><span class="line">Tags &#123; &quot;RenderType&quot;&#x3D;&quot;Transparent&quot; &quot;Queue&quot;&#x3D;&quot;Transparent&quot;&#125;</span><br><span class="line">Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">Cull Front</span><br><span class="line">...</span><br><span class="line">v2f vert (appdata v)</span><br><span class="line">&#123;</span><br><span class="line">    v2f o;</span><br><span class="line">    o.objPos &#x3D; v.vertex;</span><br><span class="line">    o.vertex &#x3D; UnityObjectToClipPos(v.vertex);</span><br><span class="line">    o.worldPos &#x3D; mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">    o.uv &#x3D; TRANSFORM_TEX(v.uv, _MainTex);</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float sphere_sdf(float3 p, float radius)&#123;</span><br><span class="line">    return length(p) - radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    float3 start &#x3D; _WorldSpaceCameraPos;</span><br><span class="line">    float3 dir &#x3D; normalize(i.worldPos-start);</span><br><span class="line">    float dt &#x3D; 0.01;</span><br><span class="line">    int hitSphereFlag &#x3D; 0;</span><br><span class="line">    float3 p &#x3D; start;</span><br><span class="line">    for (int j &#x3D; 0; j &lt; 300; j++)&#123;</span><br><span class="line">        float hit &#x3D; sphere_sdf(p, 1);</span><br><span class="line">        if (hit &lt; 0.01)&#123;</span><br><span class="line">            return fixed4(1,1,0,1);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 光线前进</span><br><span class="line">        p +&#x3D; dir * dt;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/2022-02-02-unity-make-blackhole/2022-01-21-17-14-18.png" alt="3"></p><p>这里渲染出来的球体是一个体积，即使摄像机移动到球体内部，也能渲染出球体内部的画面。<br>为了减少迭代次数，这里<code>dt</code>可以用<code>hit</code>代替。</p><h3 id="为什么要使用Raymarching？"><a href="#为什么要使用Raymarching？" class="headerlink" title="为什么要使用Raymarching？"></a>为什么要使用Raymarching？</h3><p>普通的模型渲染，是以点线面为基础的，这样的模型，就是一个空架子，从外面看很正常。但是如果视角移动到模型内部，就会发现里面是空的。一般的场景中，摄像机也不会移动到模型内部去看，所以也不需要对内部进行渲染。然而在一些特殊场景中，模型内部也需要渲染出来。比如飞机穿梭在云中，就需要渲染云的内部细节，Raymarching就可以实现体积云效果。</p><p>另外，普通的光栅化默认是按照<code>光线沿着直线传播</code>这条规律来进行渲染的，而像黑洞这样的天体，它周围的时空发生了严重的扭曲，导致光线也被弯曲了。光栅化无法渲染出光线弯曲的效果，而RayMarching可以在光线传播过程中人为的修改前进方向。</p><h3 id="黑洞的视觉组成"><a href="#黑洞的视觉组成" class="headerlink" title="黑洞的视觉组成"></a>黑洞的视觉组成</h3><ol><li>视界面：中间黑色部分的球体，球体半径称为史瓦西半径，光进入该半径后无法逃逸。</li><li>吸积盘：类比行星环，只不过吸积盘旋转速度极快，接近光速，这样才能保证不落入视界面；由于运动太快，所以会发光发热，形成了高温的气态物质。另外由于光线弯曲，吸积盘后面被黑洞挡住的部分也可以被观测到，在视觉上会出现在视界面的上下部分。</li></ol><h3 id="黑洞视觉实现"><a href="#黑洞视觉实现" class="headerlink" title="黑洞视觉实现"></a>黑洞视觉实现</h3><p>视界面可以用一个球体渲染。<br>吸积盘可以当作一个面。</p><p>光线前进过程中如果碰到视界面，直接返回黑色；<br>如果碰到吸积盘平面，还需要继续前进（因为这里将吸积盘渲染为了半透明），还有可能再碰到视界面或者由于光线弯曲二次碰到吸积盘，两次碰到的颜色需要混合。</p><p>这里使用一个Cube或者Sphere作为载体，剔除前面，并且渲染为透明物体。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">Shader <span class="string">"Unlit/BlackHoleV2Shader"</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 吸积盘纹理</span></span><br><span class="line">        _MainTex (<span class="string">"Texture"</span>, <span class="number">2</span>D) = <span class="string">"white"</span> &#123;&#125;</span><br><span class="line">        <span class="comment">// 吸积盘半径</span></span><br><span class="line">        _AcDiskRadius (<span class="string">"_AcDiskRadius"</span>, Float) = <span class="number">4</span> </span><br><span class="line">        <span class="comment">// 吸积盘的厚度，0.001效果较佳</span></span><br><span class="line">        _AcThicknessHalf (<span class="string">"_AcThickness"</span>, Float) = <span class="number">0.001</span></span><br><span class="line">        <span class="comment">// 黑洞半径</span></span><br><span class="line">        _BHRadius (<span class="string">"_BHRadius"</span>, Float) = <span class="number">0.5</span></span><br><span class="line">        <span class="comment">// 最大迭代次数</span></span><br><span class="line">        _StepLimit (<span class="string">"_StepLimit"</span>, <span class="keyword">int</span>) = <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123; <span class="string">"RenderType"</span>=<span class="string">"Transparent"</span> <span class="string">"Queue"</span>=<span class="string">"Transparent"</span>&#125;</span><br><span class="line">        Cull Front</span><br><span class="line">        Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            <span class="comment">// make fog work</span></span><br><span class="line">            #pragma multi_compile_fog</span><br><span class="line"></span><br><span class="line">            #include <span class="string">"UnityCG.cginc"</span></span><br><span class="line"></span><br><span class="line">            struct appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                UNITY_FOG_COORDS(<span class="number">1</span>)</span><br><span class="line">                float4 vertex : SV_POSITION;</span><br><span class="line">                float4 objPos : TEXCOORD1;</span><br><span class="line">                float4 worldPos : TEXCOORD2;</span><br><span class="line">                float3 origin : TEXCOORD3;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            <span class="keyword">float</span> _AcDiskRadius;</span><br><span class="line">            <span class="keyword">float</span> _BHRadius;</span><br><span class="line">            <span class="keyword">float</span> _AcThicknessHalf;</span><br><span class="line">            <span class="keyword">int</span> _StepLimit;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">float</span> <span class="title">sphere_sdf</span><span class="params">(float3 p, <span class="keyword">float</span> r)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> length(p) - r;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">v2f <span class="title">vert</span> <span class="params">(appdata v)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.objPos = v.vertex;</span><br><span class="line">                o.worldPos = mul(UNITY_MATRIX_M, v.vertex);</span><br><span class="line">                o.origin = mul(UNITY_MATRIX_M, float4(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.uv, _MainTex);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">fixed4 <span class="title">frag</span> <span class="params">(v2f i)</span> : SV_Target</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                fixed4 col = <span class="number">0</span>;</span><br><span class="line">                float3 start = _WorldSpaceCameraPos;</span><br><span class="line">                float3 ray = normalize(i.worldPos.xyz - _WorldSpaceCameraPos);</span><br><span class="line">                float3 p = start-i.origin;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> hitAcFlag = <span class="number">0</span>; <span class="comment">// 是否碰到吸积盘，0表示没有碰到，1表示碰到了一次，2表示碰到后又穿过，3表示第二次碰到</span></span><br><span class="line">                <span class="keyword">int</span> hitBHFlag = <span class="number">0</span>;</span><br><span class="line">                float3 hitBHP;</span><br><span class="line">                float3 hitBHViewRay;</span><br><span class="line">                float3 hitAcP;</span><br><span class="line">                float3 hitAcP2 = float3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">float</span> GM = <span class="number">0.3</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; _StepLimit; j++)&#123;</span><br><span class="line">                    <span class="comment">// 计算是否进入大球</span></span><br><span class="line">                    <span class="keyword">float</span> hitAcSphere = sphere_sdf(p, _AcDiskRadius);</span><br><span class="line">                    <span class="keyword">if</span> (hitAcSphere &lt; <span class="number">0.001</span>)&#123;</span><br><span class="line">                        <span class="keyword">float</span> hitBH = sphere_sdf(p, _BHRadius);</span><br><span class="line">                        <span class="keyword">float</span> hitRay = <span class="built_in">abs</span>((p.y)/ray.y);</span><br><span class="line">                        <span class="keyword">if</span> (hitBHFlag == <span class="number">0</span> &amp;&amp; hitBH &lt; <span class="number">0.001</span>) &#123;</span><br><span class="line">                            <span class="comment">// 碰到了黑洞</span></span><br><span class="line">                            hitBHFlag = <span class="number">1</span>;</span><br><span class="line">                            hitBHP = p;</span><br><span class="line">                            hitBHViewRay = ray;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hitAcFlag == <span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(p.y) &lt;= _AcThicknessHalf) &#123;</span><br><span class="line">                            <span class="comment">// 第一次碰到吸积盘</span></span><br><span class="line">                            hitAcFlag = <span class="number">1</span>;</span><br><span class="line">                            hitAcP = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hitAcFlag == <span class="number">1</span> &amp;&amp; <span class="built_in">abs</span>(p.y) &gt; _AcThicknessHalf) &#123;</span><br><span class="line">                            <span class="comment">// 从吸积盘出来了</span></span><br><span class="line">                            hitAcFlag = <span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hitAcFlag == <span class="number">2</span> &amp;&amp; <span class="built_in">abs</span>(p.y) &lt;= _AcThicknessHalf) &#123;</span><br><span class="line">                            <span class="comment">// 第二次碰到吸积盘</span></span><br><span class="line">                            hitAcFlag = <span class="number">3</span>;</span><br><span class="line">                            hitAcP2 = p;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 取最小值步进</span></span><br><span class="line">                        <span class="keyword">float</span> curDt = <span class="built_in">min</span>(hitBH, hitRay);</span><br><span class="line">                        <span class="comment">// 这里如果curDt过大时，会导致弯曲不够正确，所以最大值取到0.1</span></span><br><span class="line">                        curDt = <span class="built_in">min</span>(<span class="number">0.1</span>, curDt);</span><br><span class="line">                        <span class="keyword">if</span> (hitAcFlag == <span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="comment">// 第一次进入盘，要出来</span></span><br><span class="line">                            curDt = <span class="built_in">max</span>(<span class="number">0.001</span>, curDt); </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 计算光线弯曲</span></span><br><span class="line">                        p += curDt * ray;</span><br><span class="line">                        <span class="keyword">float</span> r2 = dot(p, p);</span><br><span class="line">                        float3 a = GM/r2*normalize(-p);</span><br><span class="line">                        ray += a*curDt;</span><br><span class="line">                        ray = normalize(ray);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        p += hitAcSphere * ray;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (hitBHFlag == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 碰到了黑洞</span></span><br><span class="line">                    col = fixed4(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 黑洞边缘发光</span></span><br><span class="line">                    col.gb = <span class="built_in">pow</span>(<span class="number">1</span>-dot(normalize(hitBHP),-hitBHViewRay),<span class="number">3</span>)*<span class="number">2</span>;</span><br><span class="line">                    <span class="comment">// 靠近盘的地方发光</span></span><br><span class="line">                    col.gb += <span class="built_in">pow</span>(<span class="number">1</span>-<span class="built_in">abs</span>(hitBHP.y/_BHRadius),<span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (hitAcFlag &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 碰到了吸积盘</span></span><br><span class="line">                    <span class="keyword">float</span> distH = length(hitAcP.xz);</span><br><span class="line">                    <span class="comment">// 纹理采样坐标</span></span><br><span class="line">                    <span class="comment">// v是距离中心距离，映射到0～1</span></span><br><span class="line">                    <span class="comment">// u是弧度值，映射到0～1</span></span><br><span class="line">                    <span class="keyword">float</span> v = smoothstep(<span class="number">0</span>, <span class="number">1</span>, distH/_AcDiskRadius);</span><br><span class="line">                    <span class="keyword">float</span> u = (<span class="built_in">atan2</span>(hitAcP.x, hitAcP.z)/UNITY_PI * v)/<span class="number">2</span> - _Time.y;</span><br><span class="line">                    <span class="keyword">float</span> tx = tex2D(_MainTex, float2(u,v)).r;</span><br><span class="line">                    <span class="keyword">if</span> (hitAcFlag == <span class="number">3</span>)&#123;</span><br><span class="line">                        <span class="comment">// 第二次碰到吸积盘</span></span><br><span class="line">                        <span class="keyword">float</span> distH2 = length(hitAcP2.xz);</span><br><span class="line">                        <span class="keyword">float</span> v2 = smoothstep(<span class="number">0</span>, <span class="number">1</span>, distH2/_AcDiskRadius);</span><br><span class="line">                        <span class="keyword">float</span> u2 = (<span class="built_in">atan2</span>(hitAcP.x, hitAcP.z)/UNITY_PI * v)/<span class="number">2</span> - _Time.y;</span><br><span class="line">                        <span class="keyword">float</span> tx2 = tex2D(_MainTex, float2(u2,v2)).r;</span><br><span class="line">                        <span class="comment">// 两次碰到吸积盘颜色混合</span></span><br><span class="line">                        <span class="comment">// 第一次碰到的颜色</span></span><br><span class="line">                        col = col*(<span class="number">1</span>-tx) + fixed4(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)*tx;</span><br><span class="line">                        col.a *= <span class="built_in">abs</span>(<span class="number">1</span>-(distH-_BHRadius)/_AcDiskRadius)*<span class="number">5</span>;</span><br><span class="line">                        <span class="comment">// 第二次碰到的颜色</span></span><br><span class="line">                        fixed4 col1 = fixed4(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)*tx2;</span><br><span class="line">                        col1.a *= <span class="built_in">abs</span>(<span class="number">1</span>-(distH2-_BHRadius)/_AcDiskRadius)*<span class="number">5</span>;</span><br><span class="line">                        <span class="comment">// 混合</span></span><br><span class="line">                        col = col1*(<span class="number">1</span>-col.a) + col*col.a;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 颜色混合</span></span><br><span class="line">                        col = col*(<span class="number">1</span>-tx) + fixed4(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)*tx;</span><br><span class="line">                        <span class="keyword">if</span> (hitBHFlag != <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="comment">// 吸积盘越靠外透明度越低</span></span><br><span class="line">                            col *= <span class="built_in">abs</span>(<span class="number">1</span>-(distH-_BHRadius)/_AcDiskRadius)*<span class="number">2</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> col;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2022-02-02-unity-make-blackhole/shaderDemo 2022_2_2 21_01_03.png&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;raymarching介绍&quot;&gt;&lt;a href=&quot;#raymarc
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://068089dy.github.io/tags/unity/"/>
    
      <category term="RayMarching" scheme="http://068089dy.github.io/tags/RayMarching/"/>
    
      <category term="黑洞" scheme="http://068089dy.github.io/tags/%E9%BB%91%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Unity批处理</title>
    <link href="http://068089dy.github.io/2021/06/24/2021-06-24-unity-draw-call-batching/"/>
    <id>http://068089dy.github.io/2021/06/24/2021-06-24-unity-draw-call-batching/</id>
    <published>2021-06-24T09:01:46.000Z</published>
    <updated>2023-01-11T10:54:22.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为什么使用批处理？"><a href="#1-为什么使用批处理？" class="headerlink" title="1.为什么使用批处理？"></a>1.为什么使用批处理？</h2><p>商店进货时，进货量越大，总的运输成本就越低。比如一次运一千箱；和每次运一箱，运一千次，肯定后者的开销更大。</p><p>图形渲染时也一样，CPU在向GPU发起DrawCall时，每次要尽可能多的传输数据，来减少调用次数。</p><h2 id="2-如何减少DrawCall"><a href="#2-如何减少DrawCall" class="headerlink" title="2.如何减少DrawCall"></a>2.如何减少DrawCall</h2><p>1.在建模时，将大量的模型合并成一个网格，这样CPU就可以一次DrawCall把数据传给GPU。但是这种方法不够灵活，模型在unity中无法修改。</p><p>2.使用批处理。</p><h2 id="3-批处理"><a href="#3-批处理" class="headerlink" title="3.批处理"></a>3.批处理</h2><p>要使用批处理，需要先在Edit-&gt;ProjectSetting-&gt;Player-&gt;OtherSetting下勾选<code>Static Batching</code>和<code>Dynamic Batching</code>。</p><p>批处理的物体必须拥有相同的材质。（在建模时，将所有模型的贴图放到一个图集中，这样就可以使用同一个材质了。）</p><h3 id="静态批处理"><a href="#静态批处理" class="headerlink" title="静态批处理"></a>静态批处理</h3><p>勾选物体<code>Inspecter-&gt;Static</code>下的<code>Batching Static</code>，unity就会在运行初始对该物体进行静态批处理。</p><p>静态批处理的物体在运行时是不可以移动的，并且会消耗大量内存。</p><h3 id="动态批处理"><a href="#动态批处理" class="headerlink" title="动态批处理"></a>动态批处理</h3><p>对于动态的物体，unity会自动的进行动态批处理，不过只会针对点数较小的模型。<br>缺点：会增加CPU运行时的开销。</p><p>参考：<a href="https://docs.unity3d.com/cn/current/Manual/DrawCallBatching.html" target="_blank" rel="noopener">https://docs.unity3d.com/cn/current/Manual/DrawCallBatching.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-为什么使用批处理？&quot;&gt;&lt;a href=&quot;#1-为什么使用批处理？&quot; class=&quot;headerlink&quot; title=&quot;1.为什么使用批处理？&quot;&gt;&lt;/a&gt;1.为什么使用批处理？&lt;/h2&gt;&lt;p&gt;商店进货时，进货量越大，总的运输成本就越低。比如一次运一千箱；和每次
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://068089dy.github.io/tags/unity/"/>
    
      <category term="DrawCall" scheme="http://068089dy.github.io/tags/DrawCall/"/>
    
      <category term="批处理" scheme="http://068089dy.github.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Unity后处理实现地形扫描特效（URP）</title>
    <link href="http://068089dy.github.io/2021/06/21/2021-06-15-unity-urp-scan/"/>
    <id>http://068089dy.github.io/2021/06/21/2021-06-15-unity-urp-scan/</id>
    <published>2021-06-21T09:01:46.000Z</published>
    <updated>2023-01-11T10:54:22.697Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2021-06-14-unity-urp-postprocessing/1.gif" alt="3"></p><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h2><p>每个<code>fragment</code>中都包含了深度信息，可以用深度信息和远近平面的值计算出每个<code>fragment</code>到<code>Camera</code>的距离，然后将指定距离范围内的点用不同的颜色显示。最后动态的调节这个指定范围就能实现扫描地形的效果了。</p><h2 id="2-着色器具体操作"><a href="#2-着色器具体操作" class="headerlink" title="2.着色器具体操作"></a>2.着色器具体操作</h2><p>在片元着色器中，算出像素点到Camera的距离：</p><p>注：_ProjectionParams参数，float4类型，x = 1.0(或如果当前使用翻转投影矩阵渲染则为-1.0),y是相机的近平面,z是相机的远平面，w是1 / FarPlane<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> rawDepth = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, sampler_CameraDepthTexture, input.uv);</span><br><span class="line"><span class="keyword">float</span> depth = Linear01Depth(rawDepth, _ZBufferParams);</span><br><span class="line"><span class="keyword">float</span> dist = depth * _ProjectionParams.z;</span><br></pre></td></tr></table></figure></p><p>然后在指定范围内给出相应的颜色：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (dist &lt; _ScanDistance &amp;&amp; dist &gt; _ScanDistance-_ScanWidth) &#123;</span><br><span class="line">    <span class="keyword">float</span> l = (dist - _ScanDistance + _ScanWidth) / _ScanWidth;</span><br><span class="line">    col = col * (<span class="number">1</span>-l) + _BaseColor * l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整的Shader代码：<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Shader "Custom/Scan"</span><br><span class="line">&#123;</span><br><span class="line">Properties</span><br><span class="line">&#123;</span><br><span class="line">_MainTex("Base (RGB)", 2D) = "white" &#123;&#125;</span><br><span class="line">_BaseColor("Base Color",Color) = (1,1,1,1)</span><br><span class="line">_ScanDistance("ScanDistance", Range(0,100)) = 1</span><br><span class="line">_ScanWidth("_ScanWidth", Range(0, 10)) = 1</span><br><span class="line">&#125;</span><br><span class="line">SubShader</span><br><span class="line">&#123;</span><br><span class="line">Tags &#123; "RenderType" = "Transparent" "RenderPipeline" = "UniversalPipeline" &#125;</span><br><span class="line">Pass</span><br><span class="line">&#123;</span><br><span class="line">HLSLPROGRAM</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma vertex vert</span></span><br><span class="line"><span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"</span></span><br><span class="line"></span><br><span class="line"><span class="type">sampler2D</span> _MainTex;</span><br><span class="line">SAMPLER(sampler_MainTex);</span><br><span class="line"></span><br><span class="line">TEXTURE2D(_CameraDepthTexture);</span><br><span class="line">SAMPLER(sampler_CameraDepthTexture);</span><br><span class="line">float4 _CameraDepthTexture_TexelSize;</span><br><span class="line">float4 _BaseColor;</span><br><span class="line"><span class="type">float</span> _ScanDistance;</span><br><span class="line"><span class="type">float</span> _ScanWidth;</span><br><span class="line"></span><br><span class="line">struct Attributes</span><br><span class="line">&#123;</span><br><span class="line">float4 positionOS : POSITION;</span><br><span class="line">float2 uv : TEXCOORD0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct Varyings</span><br><span class="line">&#123;</span><br><span class="line">float4 vertex : SV_POSITION;</span><br><span class="line">float2 uv : TEXCOORD0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Varyings vert(Attributes input)</span><br><span class="line">&#123;</span><br><span class="line">Varyings output;</span><br><span class="line"></span><br><span class="line">VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);</span><br><span class="line">output.vertex = vertexInput.positionCS;</span><br><span class="line">output.uv = input.uv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float4 frag(Varyings input) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">float4 color = tex2D(_MainTex, input.uv);</span><br><span class="line"><span class="type">float</span> rawDepth = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, sampler_CameraDepthTexture, input.uv);</span><br><span class="line"><span class="type">float</span> depth = Linear01Depth(rawDepth, _ZBufferParams);</span><br><span class="line"><span class="type">float</span> dist = depth * _ProjectionParams.z;</span><br><span class="line"><span class="keyword">if</span> (dist &lt; _ScanDistance &amp;&amp; dist &gt; _ScanDistance - _ScanWidth &amp;&amp; depth &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">float</span> l = (dist - _ScanDistance + _ScanWidth) / _ScanWidth;</span><br><span class="line">color = color * (<span class="number">1</span> - l) + _BaseColor * l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line">ENDHLSL</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">FallBack "Diffuse"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-使用RendererFeature添加后处理"><a href="#3-使用RendererFeature添加后处理" class="headerlink" title="3.使用RendererFeature添加后处理"></a>3.使用RendererFeature添加后处理</h2><p>RendererFeature使用可以看<a href="https://068089dy.github.io/2021/06/14/2021-06-14-unity-urp-postprocessing/#4-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8E%E5%A4%84%E7%90%86">这篇</a>。</p><p>新建一个RendererFeature，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class ScanRenderFeature : ScriptableRendererFeature</span><br><span class="line">&#123;</span><br><span class="line">    ScanRenderPass renderPass;</span><br><span class="line"></span><br><span class="line">    [System.Serializable]</span><br><span class="line">    public class ScanSetting</span><br><span class="line">    &#123;</span><br><span class="line">        public Material material &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">    public ScanSetting setting &#x3D; new ScanSetting();</span><br><span class="line"></span><br><span class="line">    public override void Create()</span><br><span class="line">    &#123;</span><br><span class="line">        renderPass &#x3D; new ScanRenderPass();</span><br><span class="line">        renderPass.material &#x3D; setting.material;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)</span><br><span class="line">    &#123;</span><br><span class="line">        var src &#x3D; renderer.cameraColorTarget;</span><br><span class="line">        &#x2F;&#x2F; renderer.cameraColorTarget就是管线渲染出来的图像，将它传给pass</span><br><span class="line">        renderPass.Setup(src);</span><br><span class="line">        renderer.EnqueuePass(renderPass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class ScanRenderPass: ScriptableRenderPass</span><br><span class="line">    &#123;</span><br><span class="line">        public Material material &#x3D; null;</span><br><span class="line">        RenderTargetIdentifier passSource;</span><br><span class="line">        </span><br><span class="line">        public void Setup(RenderTargetIdentifier sour)</span><br><span class="line">        &#123;</span><br><span class="line">            this.passSource &#x3D; sour;</span><br><span class="line">            &#x2F;&#x2F; 需要在天空盒渲染完成后在处理，不然天空会变成黑的</span><br><span class="line">            this.renderPassEvent &#x3D; RenderPassEvent.AfterRenderingSkybox;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!renderingData.cameraData.postProcessEnabled) return;</span><br><span class="line">            CommandBuffer cmd &#x3D; CommandBufferPool.Get(&quot;passTag&quot;);</span><br><span class="line">            &#x2F;&#x2F; 给passSource添加passMat材质后再输出到passSource</span><br><span class="line">            cmd.Blit(passSource, passSource, material);</span><br><span class="line">            context.ExecuteCommandBuffer(cmd);</span><br><span class="line">            CommandBufferPool.Release(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将ScanRenderFeature添加至管线后，新建一个材质，添加上面的Shader，然后将材质配置到Setting中。调节材质的参数，就可以看到效果了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2021-06-14-unity-urp-postprocessing/1.gif&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-原理&quot;&gt;&lt;a href=&quot;#1-原理&quot; class=&quot;headerlink&quot; title=&quot;1.原理&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://068089dy.github.io/tags/unity/"/>
    
      <category term="urp" scheme="http://068089dy.github.io/tags/urp/"/>
    
      <category term="postprocessing" scheme="http://068089dy.github.io/tags/postprocessing/"/>
    
      <category term="后处理" scheme="http://068089dy.github.io/tags/%E5%90%8E%E5%A4%84%E7%90%86/"/>
    
      <category term="shader" scheme="http://068089dy.github.io/tags/shader/"/>
    
      <category term="着色器" scheme="http://068089dy.github.io/tags/%E7%9D%80%E8%89%B2%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Unity中URP管线实现后处理的几种方式</title>
    <link href="http://068089dy.github.io/2021/06/14/2021-06-14-unity-urp-postprocessing/"/>
    <id>http://068089dy.github.io/2021/06/14/2021-06-14-unity-urp-postprocessing/</id>
    <published>2021-06-14T09:01:46.000Z</published>
    <updated>2023-01-11T10:54:22.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-内置渲染管线（Built-in）中的后处理"><a href="#1-内置渲染管线（Built-in）中的后处理" class="headerlink" title="1.内置渲染管线（Built-in）中的后处理"></a>1.内置渲染管线（Built-in）中的后处理</h2><p>通过在Camera上挂载类似这样的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class ExampleClass : MonoBehaviour </span><br><span class="line">&#123; </span><br><span class="line">    public Material mat;</span><br><span class="line">    void OnRenderImage(RenderTexture src, RenderTexture dest) </span><br><span class="line">    &#123;</span><br><span class="line">        Graphics.Blit(src, dest, mat); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>就可以给相机添加后处理效果了。</p><h2 id="2-使用RenderTexture"><a href="#2-使用RenderTexture" class="headerlink" title="2.使用RenderTexture"></a>2.使用RenderTexture</h2><p>新建一个<code>RenderTexture</code>（Create-&gt;RenderTexture）,然后拖入到Camara下的OutputTexture配置项中，这样Camara就会将渲染好的图像输出到RenderTexture中，再新建一个材质，将RenderTexture拖入材质的BaseMap中，将材质放到一张Plane上（自定义的Mesh也可以），就可以看到Plane上已经显示出Camera拍摄的图像了。然后自己再自定义后处理shader，应用到材质上即可。</p><h2 id="3-使用URP自带的一些后处理效果"><a href="#3-使用URP自带的一些后处理效果" class="headerlink" title="3.使用URP自带的一些后处理效果"></a>3.使用URP自带的一些后处理效果</h2><h3 id="在场景中新建Volume"><a href="#在场景中新建Volume" class="headerlink" title="在场景中新建Volume"></a>在场景中新建Volume</h3><p>URP提供了四种Volume：</p><ul><li>Global Volume：场景中所有开启了<code>Rendering</code>-&gt;<code>PostProcessing</code>选项相机都会受到添加后处理效果。</li><li>Box Volume/Sphere Volume/Convex Mesh Volume：这三种Volume都有Collider组件，只有在碰撞范围内的Camera会添加后处理效果。</li></ul><h3 id="在Volume组件中新建Profile"><a href="#在Volume组件中新建Profile" class="headerlink" title="在Volume组件中新建Profile"></a>在Volume组件中新建Profile</h3><p>然后点击Add Override就可以添加后处理效果了。</p><h3 id="常用的Override介绍"><a href="#常用的Override介绍" class="headerlink" title="常用的Override介绍"></a>常用的Override介绍</h3><p>Bloom：泛光效果<br>Depth Of Field：景深，相机对焦效果<br>Chromatic Aberration：色差<br>film grain：胶片颗粒<br>lens Distortion：透镜畸变<br>Motion Blur：运动模糊<br>vignette：晕映（有点望远镜黑圈的意思）</p><h2 id="4-自定义后处理"><a href="#4-自定义后处理" class="headerlink" title="4.自定义后处理"></a>4.自定义后处理</h2><p>找到项目中正在使用的PiplineAsset文件（在Edit-&gt;ProjectSetting-&gt;Quality-&gt;Rendering下可以找到项目正在使用的渲染管线文件），如果没有的话，新建一个Pipline Asset（Project下，右键Create-&gt;Rendering-&gt;URP-&gt;Pipline Asset）,创建完成后，项目中除了PiplineAsset文件，还会多出一个Forward Renderer文件，在Forward Renderer文件中点击Add Renderer Feature，就可以添加自定义的后处理效果了。</p><p>现在项目中还没有自定义的后处理效果，创建一个。</p><p>首先，新建一个继承ScriptableRendererFeature的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 记得加这两行，不然setting显示不出来</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line"></span><br><span class="line">public class CustomRender : ScriptableRendererFeature</span><br><span class="line">&#123;</span><br><span class="line">    CustomRenderPass customRenderPass;</span><br><span class="line">    [System.Serializable]</span><br><span class="line">    public class BlurSetting</span><br><span class="line">    &#123;</span><br><span class="line">        public RenderPassEvent Event &#x3D; RenderPassEvent.AfterRenderingTransparents;</span><br><span class="line">        public Material material &#x3D; null;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BlurSetting setting &#x3D; new BlurSetting();</span><br><span class="line"></span><br><span class="line">    public override void Create()</span><br><span class="line">    &#123;</span><br><span class="line">        customRenderPass &#x3D; new CustomRenderPass(&quot;a&quot;);</span><br><span class="line">        customRenderPass.passMat &#x3D; setting.material;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)</span><br><span class="line">    &#123;</span><br><span class="line">        var src &#x3D; renderer.cameraColorTarget;</span><br><span class="line">        &#x2F;&#x2F; renderer.cameraColorTarget就是管线渲染出来的图像，将它传给pass</span><br><span class="line">        customRenderPass.Setup(src);</span><br><span class="line">        renderer.EnqueuePass(customRenderPass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，新建Pass脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class CustomRenderPass : ScriptableRenderPass</span><br><span class="line">&#123;</span><br><span class="line">    public Material passMat &#x3D; null;</span><br><span class="line">    private RenderTargetIdentifier passSource &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    string passTag;</span><br><span class="line"></span><br><span class="line">    public CustomRenderPass(string tag)</span><br><span class="line">    &#123;</span><br><span class="line">        passTag &#x3D; tag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Setup(RenderTargetIdentifier sour)</span><br><span class="line">    &#123;</span><br><span class="line">        this.passSource &#x3D; sour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)</span><br><span class="line">    &#123;</span><br><span class="line">        CommandBuffer cmd &#x3D; CommandBufferPool.Get(passTag);</span><br><span class="line">        &#x2F;&#x2F; 给passSource添加passMat材质后再输出到passSource</span><br><span class="line">        cmd.Blit(passSource, passSource, passMat);</span><br><span class="line">        context.ExecuteCommandBuffer(cmd);</span><br><span class="line">        CommandBufferPool.Release(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成后点击<code>Add Renderer Feature</code>，就可以看到CustomRender已经出现在选项中了。添加效果后，新建一个材质放到Setting的配置项中，就可以看到效果了。</p><p>现在，这个后处理已经添加到了渲染管线中，但是这是一个全局效果，不好管理，如果想在Volume中管理，还需要新建Volume脚本。</p><p>新建一个Volume脚本:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[System.Serializable, VolumeComponentMenu(&quot;CustomVolume&#x2F;CustomRender&quot;)]</span><br><span class="line">public sealed class CustomVolume1 : VolumeComponent, IPostProcessComponent</span><br><span class="line">&#123;</span><br><span class="line">    [Tooltip(&quot;是否开启效果&quot;)]</span><br><span class="line">    public BoolParameter enableEffect &#x3D; new BoolParameter(true);</span><br><span class="line">    public bool IsActive() &#x3D;&gt; enableEffect&#x3D;&#x3D;true;</span><br><span class="line">    public bool IsTileCompatible() &#x3D;&gt; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存后在<code>Volume</code>组件中<code>Add Override</code>，已经可以看到<code>CustomVolume1</code>效果出现在选项中了。</p><p>然后修改CustomRenderPass的Excute方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)</span><br><span class="line">&#123;</span><br><span class="line">    CommandBuffer cmd &#x3D; CommandBufferPool.Get(passTag);</span><br><span class="line">    cmd.Blit(passSource, passSource, passMat);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 找到CustomVolume1组件，如果没找到或者未开启，直接return</span><br><span class="line">    var stack &#x3D; VolumeManager.instance.stack;</span><br><span class="line">    CustomVolume1 customVolume1 &#x3D; stack.GetComponent&lt;CustomVolume1&gt;();</span><br><span class="line">    if (customVolume1 &#x3D;&#x3D; null)&#123;return;&#125;</span><br><span class="line">    if (!customVolume1.IsActive())return;</span><br><span class="line"></span><br><span class="line">    context.ExecuteCommandBuffer(cmd);</span><br><span class="line">    CommandBufferPool.Release(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考：</p><ul><li><a href="https://johnyoung404.github.io/2019/12/13/Unity%E4%B8%AD%E7%9A%84%E5%90%8E%E5%A4%84%E7%90%86-post-processing/" target="_blank" rel="noopener">https://johnyoung404.github.io/2019/12/13/Unity%E4%B8%AD%E7%9A%84%E5%90%8E%E5%A4%84%E7%90%86-post-processing/</a></li><li><a href="https://zhuanlan.zhihu.com/p/149635502" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/149635502</a></li><li><a href="https://www.jianshu.com/p/a5456036ab95" target="_blank" rel="noopener">https://www.jianshu.com/p/a5456036ab95</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-内置渲染管线（Built-in）中的后处理&quot;&gt;&lt;a href=&quot;#1-内置渲染管线（Built-in）中的后处理&quot; class=&quot;headerlink&quot; title=&quot;1.内置渲染管线（Built-in）中的后处理&quot;&gt;&lt;/a&gt;1.内置渲染管线（Built-in
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://068089dy.github.io/tags/unity/"/>
    
      <category term="urp" scheme="http://068089dy.github.io/tags/urp/"/>
    
      <category term="postprocessing" scheme="http://068089dy.github.io/tags/postprocessing/"/>
    
      <category term="后处理" scheme="http://068089dy.github.io/tags/%E5%90%8E%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>从mixamo导入人物动画到godot</title>
    <link href="http://068089dy.github.io/2019/12/01/godot-import-animation-from-mixamo/"/>
    <id>http://068089dy.github.io/2019/12/01/godot-import-animation-from-mixamo/</id>
    <published>2019-12-01T09:01:46.000Z</published>
    <updated>2023-01-11T10:54:22.699Z</updated>
    
    <content type="html"><![CDATA[<p>环境：</p><ul><li>blender2.8</li><li>godot3.2</li></ul><p>mixamo是adobe推出的3D动画在线服务平台，它提供了很多免费的角色和动画，并且可以自动绑骨。用户可以上传自己的模型，然后简单的选中关节后，就可以将资源库里的所有动作应用到我们的模型上面。</p><p>接下来演示如何将mixamo上的模型动画导入到godot中。</p><p>首先，进入<a href="https://www.mixamo.com/" target="_blank" rel="noopener">官网</a>。注册登录后，就来到了这个页面：</p><hr><p><img src="/images/godot-import-animation-from-mixamo/1.png" alt=""></p><h2 id="下载模型和动画"><a href="#下载模型和动画" class="headerlink" title="下载模型和动画"></a>下载模型和动画</h2><p>这里就选用默认的模型为例：</p><p>第一步先不需要选动作，直接将这个T-pose下载下来：</p><hr><p><img src="/images/godot-import-animation-from-mixamo/2.png" alt=""></p><p>然后选中一个动画，预览区会出现绑定该动画后的模型动画：</p><hr><p><img src="/images/godot-import-animation-from-mixamo/3.png" alt=""></p><p>点击下载，选择without skin选项，只下载骨骼动画，不下载模型。</p><hr><p><img src="/images/godot-import-animation-from-mixamo/4.png" alt=""></p><p>按照上面的步骤再下载一个动画，这里我下载了defeated。</p><p>这样，我们就有了三个文件：</p><hr><p><img src="/images/godot-import-animation-from-mixamo/5.png" alt=""></p><h2 id="使用blender处理模型和动画"><a href="#使用blender处理模型和动画" class="headerlink" title="使用blender处理模型和动画"></a>使用blender处理模型和动画</h2><p>接下来，打开blender，新建一个空工程，然后导入xbot.fbx:</p><hr><p><img src="/images/godot-import-animation-from-mixamo/6.png" alt=""></p><hr><p><img src="/images/godot-import-animation-from-mixamo/6-1.png" alt=""></p><p>继续导入一个动画文件：</p><hr><p><img src="/images/godot-import-animation-from-mixamo/6-2.png" alt=""></p><p><img src="/images/godot-import-animation-from-mixamo/6-3.png" alt=""></p><p>现在，切换到动画摄影表：</p><hr><p><img src="/images/godot-import-animation-from-mixamo/7.png" alt=""></p><p>选择动作编辑器（action editor）</p><hr><p><img src="/images/godot-import-animation-from-mixamo/7-2.png" alt=""></p><p>先选中t-pose模型，再选中“跑”动画。</p><hr><p><img src="/images/godot-import-animation-from-mixamo/7-3.png" alt=""></p><p>然后空格播放，这样角色就跑起来了：</p><hr><p><img src="/images/godot-import-animation-from-mixamo/a.gif" alt=""></p><p>按照同样的方法，将defeated动画导入blender。</p><p>导入进来的动画可以在动作编辑器中看到(记得勾选伪用户)：</p><hr><p><img src="/images/godot-import-animation-from-mixamo/12-2.png" alt=""><br>当我们勾选伪用户以后，就可以在场景集合中把导入的包含骨架的动画删掉了。</p><p><img src="/images/godot-import-animation-from-mixamo/12-4.png" alt=""></p><p>接下来我们将所有的动画<code>下推</code>，这样会将动画存放到NLA中，才会被godot导入：</p><hr><p><img src="/images/godot-import-animation-from-mixamo/12-5.png" alt=""></p><p>可以看到，动画下面多出了一个NLA轨道，并且多了两个<code>action stash</code>，然后打开非线性动画：</p><p><img src="/images/godot-import-animation-from-mixamo/12-3.png" alt=""><br><img src="/images/godot-import-animation-from-mixamo/12-6.png" alt=""></p><p>可以看到，两个动画都在轨道中了。</p><p>然后将工程导出为gltf或者escn格式（目前godot对这两种的支持最好，escn需要安装额外的插件）。</p><h2 id="导入到godot"><a href="#导入到godot" class="headerlink" title="导入到godot"></a>导入到godot</h2><p>选择刚才导出的escn，直接打开即可。</p><hr><p><img src="/images/godot-import-animation-from-mixamo/9.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;blender2.8&lt;/li&gt;
&lt;li&gt;godot3.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mixamo是adobe推出的3D动画在线服务平台，它提供了很多免费的角色和动画，并且可以自动绑骨。用户可以上传自己的模型，然后简单的选中关节后，就可以将
      
    
    </summary>
    
    
    
      <category term="godot" scheme="http://068089dy.github.io/tags/godot/"/>
    
      <category term="mixamo" scheme="http://068089dy.github.io/tags/mixamo/"/>
    
      <category term="blender" scheme="http://068089dy.github.io/tags/blender/"/>
    
  </entry>
  
  <entry>
    <title>Godot实现3D透视效果</title>
    <link href="http://068089dy.github.io/2019/11/16/godot-3d-xray/"/>
    <id>http://068089dy.github.io/2019/11/16/godot-3d-xray/</id>
    <published>2019-11-16T09:01:46.000Z</published>
    <updated>2023-01-11T10:54:22.698Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/godot-3d-xray/a.gif" alt="3"></p><p>参考：<br><a href="https://docs.godotengine.org/en/3.0/tutorials/shading/shading_language.html" target="_blank" rel="noopener">godot shading language文档</a><br><a href="https://docs.godotengine.org/en/3.1/tutorials/shading/advanced_postprocessing.html" target="_blank" rel="noopener">Godot Advanced post-processing</a><br><a href="https://zhuanlan.zhihu.com/p/74726302" target="_blank" rel="noopener">OpenGL投影矩阵</a></p><h2 id="深度缓冲（z-buffer）与深度测试"><a href="#深度缓冲（z-buffer）与深度测试" class="headerlink" title="深度缓冲（z-buffer）与深度测试"></a>深度缓冲（z-buffer）与深度测试</h2><p><code>深度缓冲</code>中存放了每一个点到视点的深度信息，离视点越近深度越浅。按理说离得近的物体会挡住离得远的，那么深度越浅自然也应该优先显示出来，<code>深度测试</code>就是来做这件事的，如果当前点的深度比缓冲区中对应的点要浅，那么就覆盖显示。</p><h2 id="如何透视"><a href="#如何透视" class="headerlink" title="如何透视"></a>如何透视</h2><p>要想让被挡住的物体显示出来，只需关闭深度测试即可。在godot中，将渲染模式改为depth_test_disable。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shader_type spatial;</span><br><span class="line">render_mode depth_test_disable;</span><br></pre></td></tr></table></figure><p><img src="/images/godot-3d-xray/xray-0.png" alt="1"></p><p>为了标记透视物体，我们将物体渲染为红色，不然可能会产生物体本来就在前面的视觉错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shader_type spatial;</span><br><span class="line">render_mode depth_test_disable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ALBEDO = vec3(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>); <span class="comment">// use red for material albedo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/godot-3d-xray/xray-2.png" alt="2"></p><h2 id="区分被遮挡的部分"><a href="#区分被遮挡的部分" class="headerlink" title="区分被遮挡的部分"></a>区分被遮挡的部分</h2><p>现在将被挡住的部分显示为红色，没有被挡住的不变化。这里使用了深度纹理来获取像素点的深度，当像素点被挡住时，depth会小于1，没被挡住时大于1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">shader_type spatial;</span><br><span class="line"></span><br><span class="line">render_mode depth_test_disable;</span><br><span class="line"></span><br><span class="line">void fragment() &#123;</span><br><span class="line">float depth &#x3D; texture(DEPTH_TEXTURE, SCREEN_UV).x;</span><br><span class="line">if (depth &lt; 1.0)&#123;</span><br><span class="line">ALBEDO &#x3D; vec3(1.0, 0.0, 0.0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/images/godot-3d-xray/a.gif" alt="3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/godot-3d-xray/a.gif&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;https://docs.godotengine.org/en/3.0/tutorials/shading/shading_lang
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
